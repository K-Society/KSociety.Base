@page "/"
@using KSociety.Base.Srv.Dto
@using KSociety.Base.InfraSub.Shared.Interface
@using System.ComponentModel
@using System.Threading
@using KSociety.Base.App.Shared.Dto.Req
@using KSociety.Base.App.Shared
@using KSociety.Base.Srv.Agent.List.GridView

<h1>Hello, world!</h1>

Welcome to your new app.

<br />
<br />
@*<DataGridComponent T="TagGroup"
    TList="TagGroupGridView"
    TRemove="TagGroupRemove"
    TAddReq="TagGroupAdd"
    TAddRes="TagGroupAddRes"
    TUpdateReq="TagGroupUpdate"
    TUpdateRes="TagGroupUpdateRes"
    TCopyReq="TagGroupCopy"
    TCopyRes="TagGroupCopyRes"
    TModifyField="TagGroupModify"
    TAgentCommand=""
    QueryListGridView="data"
    Paging="@(new PagingConfig{ Enabled = true, CustomPager = false, PageSize = 3})"></DataGridComponent>*@

<DataGridBase T="TagGroup"
              TList="TagGroupList"
              TGridView="TagGroupGridView"
              QueryListGridView="gridView"></DataGridBase>

<DataGridCommand T="Connection"
                 TList="ConnectionList"
                 TGridView="ConnectionGridView"
                 QueryListGridView="connectionGridView"></DataGridCommand>

@code{

    //private TagGroupList data;

    private TagGroupGridView gridView;

    private ConnectionGridView connectionGridView;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        gridView = new TagGroupGridView();

        connectionGridView = new ConnectionGridView();

    }

    class TagGroupGridView : IAgentQueryModel<TagGroup, TagGroupList>
    {
        public TagGroupList LoadAllRecords(CancellationToken cancellationToken = default)
        {
            var list = new List<TagGroup>
            {
                new TagGroup(Guid.Parse("F4BFA359-4BFC-4828-8584-86C03FB5344D"), "Test1", 50, 50, true),
                new TagGroup(Guid.Parse("09C4DC91-F4B9-4282-B7FB-6E72EF62AB1F"), "Test2", 50, 50, false),
                new TagGroup(Guid.Parse("7CC4E0FC-ED91-4CB1-9230-556D97F6E37D"), "Test3", 50, 50, true),
                new TagGroup(Guid.Parse("5DC89FAD-88CE-4BDD-AC90-0BDF4769E41D"), "Test4", 50, 50, false),
                new TagGroup(Guid.Parse("7803E049-2B2F-4B43-9537-A5A287B791BF"), "Test5", 50, 50, true)
            };

            return new TagGroupList(list);
        }

        public async ValueTask<TagGroupList> LoadAllRecordsAsync(CancellationToken cancellationToken = default)
        {
            var list = new List<TagGroup>
            {
                new TagGroup(Guid.Parse("F4BFA359-4BFC-4828-8584-86C03FB5344D"), "Test1", 50, 50, true),
                new TagGroup(Guid.Parse("09C4DC91-F4B9-4282-B7FB-6E72EF62AB1F"), "Test2", 50, 50, false),
                new TagGroup(Guid.Parse("7CC4E0FC-ED91-4CB1-9230-556D97F6E37D"), "Test3", 50, 50, true),
                new TagGroup(Guid.Parse("5DC89FAD-88CE-4BDD-AC90-0BDF4769E41D"), "Test4", 50, 50, false),
                new TagGroup(Guid.Parse("7803E049-2B2F-4B43-9537-A5A287B791BF"), "Test5", 50, 50, true)
            };

            return new TagGroupList(list);
        }
    }

    class TagGroupList : ObjectList<TagGroup>
    {
        public TagGroupList() { }

        public TagGroupList
            (
            List<TagGroup> tagGroups
            )
        {
            List = tagGroups;
        }
    }

    class TagGroup : IAppDtoObject<
        TagGroupRemove,
        TagGroupAdd,
        TagGroupUpdate,
        TagGroupCopy>
    {
        [Browsable(false)]
        public Guid Id { get; set; }
        public string Name { get; set; }
        public int Clock { get; set; }
        public int Update { get; set; }
        public bool Enable { get; set; }

        public TagGroup()
        {

        }

        public TagGroup
            (
            Guid tagGroupId,
            string name,
            int clock,
            int update,
            bool enable
            )
        {
            Id = tagGroupId;
            Name = name;
            Clock = clock;
            Update = update;
            Enable = enable;
        }

        public TagGroupRemove GetRemoveReq()
        {
            return new TagGroupRemove(Id);
        }

        public TagGroupAdd GetAddReq()
        {
            return new TagGroupAdd(Name, Clock, Update, Enable);
        }
        public TagGroupUpdate GetUpdateReq()
        {
            return new TagGroupUpdate(Id, Name, Clock, Update, Enable);
        }


        public TagGroupCopy GetCopyReq()
        {
            return new TagGroupCopy(Name, Clock, Update, Enable);
        }
    }

    class TagGroupRemove : RemoveReq
    {
        public TagGroupRemove() { }

        public TagGroupRemove(Guid id)
            : base(id)
        {
        }
    }

    class TagGroupRemoveRes : IResponse
    {
        public TagGroupRemoveRes() { }

        public TagGroupRemoveRes(bool response)
        {
        }
    }

    class TagGroupAdd : IRequest
    {
        public string Name { get; set; }
        public int Clock { get; set; }
        public int Update { get; set; }
        public bool Enable { get; set; }

        public TagGroupAdd() { }

        public TagGroupAdd(string name, int clock, int update, bool enable)
        {
            Name = name;
            Clock = clock;
            Update = update;
            Enable = enable;
        }
    }

    class TagGroupAddRes : IResponse, IIdObject
    {
        public Guid Id { get; set; }

        public TagGroupAddRes() { }

        public TagGroupAddRes(Guid id)
        {
            Id = id;
        }
    }

    class TagGroupUpdate : IRequest
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public int Clock { get; set; }
        public int Update { get; set; }
        public bool Enable { get; set; }

        public TagGroupUpdate() { }

        public TagGroupUpdate(Guid id, string name, int clock, int update, bool enable)
        {
            Id = id;
            Name = name;
            Clock = clock;
            Update = update;
            Enable = enable;
        }
    }

    class TagGroupUpdateRes : IRequest, IIdObject
    {
        public Guid Id { get; set; }


        public TagGroupUpdateRes() { }

        public TagGroupUpdateRes(Guid id)
        {
            Id = id;
        }
    }

    class TagGroupCopy : IRequest
    {
        public string Name { get; set; }
        public int Clock { get; set; }
        public int Update { get; set; }
        public bool Enable { get; set; }

        public TagGroupCopy() { }

        public TagGroupCopy(string name, int clock, int update, bool enable)
        {
            Name = name;
            Clock = clock;
            Update = update;
            Enable = enable;
        }
    }

    class TagGroupCopyRes : IRequest, IIdObject
    {
        public Guid Id { get; set; }

        public TagGroupCopyRes() { }

        public TagGroupCopyRes(Guid id)
        {
            Id = id;
        }
    }

    class TagGroupModify : ModifyFieldReq
    {
        public TagGroupModify() { }

        public TagGroupModify(Guid id, string fieldName, string value)
            : base(id, fieldName, value)
        { }
    }

    //

    class ConnectionGridView : IAgentQueryModel<Connection, ConnectionList>
    {
        public ConnectionList LoadAllRecords(CancellationToken cancellationToken = default)
        {
            var automationType = new List<Srv.Dto.KeyValuePair<int, string>>
            {
                new Srv.Dto.KeyValuePair<int, string>(0, "NONON"),
                new Srv.Dto.KeyValuePair<int, string>(1, "Siemens"),
                new Srv.Dto.KeyValuePair<int, string>(2, "Logix")

            };
            var list = new List<Connection>
            {
                new Connection(Guid.Parse("F4BFA359-4BFC-4828-8584-86C03FB5344D"), 1, "Pippo1", "123", true, false),
                new Connection(Guid.Parse("09C4DC91-F4B9-4282-B7FB-6E72EF62AB1F"), 1, "Pippo2", "123", true, false),
                new Connection(Guid.Parse("7CC4E0FC-ED91-4CB1-9230-556D97F6E37D"), 1, "Pippo3", "123", true, false),
                new Connection(Guid.Parse("5DC89FAD-88CE-4BDD-AC90-0BDF4769E41D"), 1, "Pippo4", "123", true, false),
                new Connection(Guid.Parse("7803E049-2B2F-4B43-9537-A5A287B791BF"), 1, "Pippo5", "123", true, false)
            };

            return new ConnectionList(list, automationType);
        }

        public async ValueTask<ConnectionList> LoadAllRecordsAsync(CancellationToken cancellationToken = default)
        {
            var automationType = new List<Srv.Dto.KeyValuePair<int, string>>
            {
                new Srv.Dto.KeyValuePair<int, string>(0, "NONON"),
                new Srv.Dto.KeyValuePair<int, string>(1, "Siemens"),
                new Srv.Dto.KeyValuePair<int, string>(2, "Logix")

            };
            var list = new List<Connection>
            {
                new Connection(Guid.Parse("F4BFA359-4BFC-4828-8584-86C03FB5344D"), 1, "Pippo1", "123", true, false),
                new Connection(Guid.Parse("09C4DC91-F4B9-4282-B7FB-6E72EF62AB1F"), 1, "Pippo2", "123", true, false),
                new Connection(Guid.Parse("7CC4E0FC-ED91-4CB1-9230-556D97F6E37D"), 1, "Pippo3", "123", true, false),
                new Connection(Guid.Parse("5DC89FAD-88CE-4BDD-AC90-0BDF4769E41D"), 1, "Pippo4", "123", true, false),
                new Connection(Guid.Parse("7803E049-2B2F-4B43-9537-A5A287B791BF"), 1, "Pippo5", "123", true, false)
            };

            return new ConnectionList(list, automationType);
        }
    }

    class ConnectionList : ObjectList<Connection>
    {
        public ListKeyValuePair<int, string> AutomationTypeId { get; set; }

        public ConnectionList() { }

        public ConnectionList
            (
            List<Connection> tagGroups,
            List<Base.Srv.Dto.KeyValuePair<int, string>> automationTypeId
            )
        {
            List = tagGroups;
            AutomationTypeId = new ListKeyValuePair<int, string>(automationTypeId);
        }
    }

    class Connection : IAppDtoObject<
    ConnectionRemove,
    ConnectionAdd,
    ConnectionUpdate,
    ConnectionCopy>
    {
        [Browsable(false)]
        public Guid Id { get; set; }
        public int AutomationTypeId { get; set; }
        public string Name { get; set; }
        public string Ip { get; set; }
        public bool Enable { get; set; }
        public bool WriteEnable { get; set; }

        public Connection()
        {

        }

        public Connection(
            Guid id,
            int automationTypeId,
            string name, string ip,
            bool enable, bool writeEnable
            )
        {
            Id = id;
            AutomationTypeId = automationTypeId;
            Name = name;
            Ip = ip;
            Enable = enable;
            WriteEnable = writeEnable;
        }

        public ConnectionRemove GetRemoveReq()
        {
            return new ConnectionRemove(Id);
        }

        public ConnectionAdd GetAddReq()
        {
            return new ConnectionAdd(AutomationTypeId, Name, Ip, Enable, WriteEnable);
        }

        public ConnectionUpdate GetUpdateReq()
        {
            return new ConnectionUpdate(Id, AutomationTypeId, Name, Ip, Enable, WriteEnable);
        }

        public ConnectionCopy GetCopyReq()
        {
            return new ConnectionCopy(AutomationTypeId, Name, Ip, Enable, WriteEnable);
        }
    }

    class ConnectionRemove : RemoveReq
    {
        public ConnectionRemove() { }

        public ConnectionRemove(Guid id)
            : base(id)
        {
        }
    }

    class ConnectionAdd : IRequest
    {

        public int AutomationTypeId { get; set; }

        public string Name { get; set; }

        public string Ip { get; set; }
        public bool Enable { get; set; }

        public bool WriteEnable { get; set; }

        public ConnectionAdd() { }

        public ConnectionAdd(
            int automationTypeId,
            string name, string ip,
            bool enable, bool writeEnable
            )
        {
            AutomationTypeId = automationTypeId;
            Name = name;
            Ip = ip;
            Enable = enable;
            WriteEnable = writeEnable;
        }
    }

    class ConnectionUpdate : IRequest
    {
        public Guid Id { get; set; }

        public int AutomationTypeId { get; set; }

        public string Name { get; set; }

        public string Ip { get; set; }

        public bool Enable { get; set; }

        public bool WriteEnable { get; set; }

        public ConnectionUpdate() { }

        public ConnectionUpdate(
            Guid id,
            int automationTypeId,
            string name, string ip,
            bool enable, bool writeEnable
            )
        {
            Id = id;
            AutomationTypeId = automationTypeId;
            Name = name;
            Ip = ip;
            Enable = enable;
            WriteEnable = writeEnable;
        }
    }

    class ConnectionCopy : IRequest
    {
        public int AutomationTypeId { get; set; }

        public string Name { get; set; }

        public string Ip { get; set; }

        public bool Enable { get; set; }

        public bool WriteEnable { get; set; }

        public ConnectionCopy() { }

        public ConnectionCopy(
            int automationTypeId,
            string name, string ip,
            bool enable, bool writeEnable
            )
        {
            AutomationTypeId = automationTypeId;
            Name = name;
            Ip = ip;
            Enable = enable;
            WriteEnable = writeEnable;
        }
    }
}
