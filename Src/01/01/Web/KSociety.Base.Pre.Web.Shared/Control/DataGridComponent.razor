@using System.ComponentModel
@using System.Reflection

@typeparam T
@typeparam TList
@*//@inject KSociety.Base.Srv.Agent.IAgentQueryModel<T, TObject> AgentQueryModel*@
@*//@inject KSociety.Base.Srv.Agent.List.GridView.IAgentQueryModel<T, TList> QueryListGridView*@

<table class="table is-fullwidth">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {
                CreateColumns();
            }
            else
            {
                foreach (var column in Columns)
                {
                    @if (column.Alignment != Alignment.NotSet)
                    {
                        switch (column.Alignment)
                        {
                            case Alignment.Left:
                                <th class="align-left">@column.Caption</th>
                                break;
                            case Alignment.Center:
                                <th class="align-center">@column.Caption</th>
                                break;
                            case Alignment.Right:
                                <th class="align-right">@column.Caption</th>
                                break;

                            case Alignment.NotSet:
                            default:
                                <th>@column.Caption</th>
                                break;
                        }

                    }
                    else
                    {
                        <th>@column.Caption</th>
                    }
                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in QueryListGridView.List.Skip(Paging.NumberToItemsToSkip(CurrentPageNumber))
        .Take(Paging.NumberOfItemsToTake(QueryListGridView.List.Count)))
        {
            <tr>
                @foreach (var column in Columns)
                {
                    @if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
                    {
                        var value = string.Empty;
                        switch (column.DataType)
                        {
                            case DataType.Date:
                            case DataType.DateTime:
                                value = DateTime.Parse(typeof(T).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                                break;
                            case DataType.Boolean:
                                value = bool.Parse(typeof(T).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                                break;
                            case DataType.Currency:
                                value = Math.Round(double.Parse(typeof(T).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                                break;
                            default:
                                break;


                        }

                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@value</td>
                        }
                        else
                        {
                            <td>@value</td>
                        }
                    }
                    else
                    {
                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@typeof(T).GetProperty(column.DataField).GetValue(item)</td>
                        }
                        else
                        {
                            <td>@typeof(T).GetProperty(column.DataField).GetValue(item)</td>
                        }
                    }
                }
            </tr>
        }
    </tbody>
</table>

<div class="level">
    <div class="level-left">

    </div>
    <div class="level-right">
        <div class="level-item">
            @if (Paging != null && Paging.Enabled)
            {
                @if (Paging.CustomPager)
                {
                    @CustomPager
                }
                else
                {
                    <span style="font-size: 14px; cursor:pointer" @onclick="GoToPreviousPage"><b>&lt; Previous</b></span>
                    <span style="font-size: 12px; color:gray">&nbsp;&nbsp;Page @CurrentPageNumber of @Paging.MaxPageNumber(QueryListGridView.List.Count)&nbsp;&nbsp;</span>
                    <span style="font-size: 14px; cursor:pointer" @onclick="GoToNextPage"><b>Next &gt;</b></span>
                }
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public List<T> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; }

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public TList QueryListGridView { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    _queryListGridView = await QueryListGridView.LoadAllRecordsAsync();
    //}

    public void GoToPreviousPage()
    {
        CurrentPageNumber = Paging.PreviousPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, QueryListGridView.List.Count);
    }

    protected void CreateColumns()
    {
        foreach (var propertyInfo in typeof(T).GetProperties())
        {
            if (!IsBrowsable(propertyInfo)) continue;

            //DataGridViewColumn dataGridViewColumn;
            ColumnDefinition dataGridViewColumn = new ColumnDefinition();

            //if (BindingSourcesComboBox.ContainsKey(propertyInfo.Name))
            //{
            //    dataGridViewColumn = new StdDataGridViewComboBoxColumn
            //    {
            //        ValueMember = "Key",
            //        DisplayMember = "Value"

            //        //DisplayIndex = 0
            //    };
            //}
            //else
            //{
            if (propertyInfo.PropertyType == typeof(bool))
            {
                //dataGridViewColumn = new DataGridViewCheckBoxColumn();
                ////dataGridViewColumn.ValueType = propertyInfo.PropertyType;
            }
            else if (propertyInfo.PropertyType == typeof(byte[]))
            {
                //dataGridViewColumn = new StdDataGridViewByteArrayColumn();
                ////dataGridViewColumn.ValueType = typeof(string); //propertyInfo.PropertyType;
            }
            else
            {
                //dataGridViewColumn = new DataGridViewTextBoxColumn();
                ////dataGridViewColumn.ValueType = propertyInfo.PropertyType;
            }


            //dataGridViewColumn.ValueType = propertyInfo.PropertyType;
            dataGridViewColumn.DataType = DataType.String;//propertyInfo.PropertyType;
            //}

            //dataGridViewColumn.Name = propertyInfo.Name;
            //dataGridViewColumn.DataPropertyName = propertyInfo.Name;

            dataGridViewColumn.Caption = propertyInfo.Name;
            //dataGridViewColumn.DataPropertyName = propertyInfo.Name;

            Columns.Add(dataGridViewColumn);
        }
    }

    private static bool IsBrowsable(PropertyInfo propertyInfo)
    {
        var attributes = propertyInfo.GetCustomAttributes(false);

        if (attributes.Any())
        {
            foreach (var attribute in attributes)
            {
                if (attribute is BrowsableAttribute browsableAttribute)
                {
                    return browsableAttribute.Browsable;
                }
            }
            return true;
        }
        return true;
    }

}
